// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SlavChanAPP.DataBaseContext;

#nullable disable

namespace SlavChanAPP.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20231111183846_third")]
    partial class third
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SlavChanAPP.Models.Board", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Shortcut")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("Id");

                    b.ToTable("Boards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ogólna",
                            Shortcut = "ABC"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Technologia",
                            Shortcut = "XYZ"
                        });
                });

            modelBuilder.Entity("SlavChanAPP.Models.Reply", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("ReplyDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReplyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Replies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bc60a72b-ff07-41cd-9f86-a4e39f409f66"),
                            Content = "Treść odpowiedzi",
                            ReplyDate = new DateTime(2023, 11, 11, 19, 50, 46, 529, DateTimeKind.Local).AddTicks(8717),
                            ReplyUserId = new Guid("dc28023b-3366-4d8d-a19d-ffae7d0d83a0"),
                            SubjectId = new Guid("c0dca3bb-2d04-4f2f-9489-d3c50ff40ad3"),
                            UserId = new Guid("b84c6457-b5f8-444e-9be3-c379d450c330")
                        },
                        new
                        {
                            Id = new Guid("69e45305-a1de-4894-94fd-a3e129d3ea35"),
                            Content = "Jebać pis",
                            ReplyDate = new DateTime(2023, 11, 11, 20, 1, 46, 529, DateTimeKind.Local).AddTicks(8723),
                            ReplyUserId = new Guid("b84c6457-b5f8-444e-9be3-c379d450c330"),
                            SubjectId = new Guid("c0dca3bb-2d04-4f2f-9489-d3c50ff40ad3"),
                            UserId = new Guid("52e7e672-d1d6-4424-8331-06a81df2d67a")
                        });
                });

            modelBuilder.Entity("SlavChanAPP.Models.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BoardId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("TimeSinceLastPost")
                        .HasColumnType("real");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9bd51624-d70a-47a7-a41b-325000b1e9ee"),
                            BoardId = 1,
                            Content = "Treść pierwszego wątku",
                            Name = "Pierwszy wątek",
                            PostDate = new DateTime(2023, 11, 11, 19, 38, 46, 529, DateTimeKind.Local).AddTicks(8595),
                            TimeSinceLastPost = 19f,
                            UserId = new Guid("dc28023b-3366-4d8d-a19d-ffae7d0d83a0"),
                            UserName = "User1"
                        },
                        new
                        {
                            Id = new Guid("c0dca3bb-2d04-4f2f-9489-d3c50ff40ad3"),
                            BoardId = 2,
                            Content = "Treść drugiego wątku",
                            Name = "Drugi wątek",
                            PostDate = new DateTime(2023, 11, 11, 19, 38, 46, 529, DateTimeKind.Local).AddTicks(8652),
                            TimeSinceLastPost = 19f,
                            UserId = new Guid("928bb112-4603-4c0f-8a4c-18a1ae4da3da"),
                            UserName = "User2"
                        });
                });

            modelBuilder.Entity("SlavChanAPP.Models.Reply", b =>
                {
                    b.HasOne("SlavChanAPP.Models.Subject", "Subject")
                        .WithMany("Replies")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SlavChanAPP.Models.Subject", b =>
                {
                    b.HasOne("SlavChanAPP.Models.Board", "Board")
                        .WithMany("Subjects")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");
                });

            modelBuilder.Entity("SlavChanAPP.Models.Board", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("SlavChanAPP.Models.Subject", b =>
                {
                    b.Navigation("Replies");
                });
#pragma warning restore 612, 618
        }
    }
}
