// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SlavChanAPP.DataBaseContext;

#nullable disable

namespace SlavChanAPP.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SlavChanAPP.Models.Board", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Shortcut")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("Id");

                    b.ToTable("Boards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ogólna",
                            Shortcut = "ABC"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Technologia",
                            Shortcut = "XYZ"
                        });
                });

            modelBuilder.Entity("SlavChanAPP.Models.Reply", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("ReplyDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReplyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ThreadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ThreadId");

                    b.ToTable("Replies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7afc26f1-0896-40a3-b5e9-bc818c948b22"),
                            Content = "Treść odpowiedzi",
                            ReplyDate = new DateTime(2023, 10, 30, 11, 30, 31, 905, DateTimeKind.Local).AddTicks(8692),
                            ReplyUserId = new Guid("6f0386e4-449c-48de-90e9-bafecdb73c7a"),
                            ThreadId = new Guid("685f58f1-3c97-4190-a8d5-e1ca395a7a21"),
                            UserId = new Guid("0c6856f6-aa7a-4267-a585-21cf66b633eb")
                        },
                        new
                        {
                            Id = new Guid("d96497ef-7e4d-4801-8ecc-0b9e381b3d81"),
                            Content = "Jebać pis",
                            ReplyDate = new DateTime(2023, 10, 30, 11, 41, 31, 905, DateTimeKind.Local).AddTicks(8698),
                            ReplyUserId = new Guid("0c6856f6-aa7a-4267-a585-21cf66b633eb"),
                            ThreadId = new Guid("685f58f1-3c97-4190-a8d5-e1ca395a7a21"),
                            UserId = new Guid("faf63b16-76b7-49cf-8fdc-b7a660c47d49")
                        });
                });

            modelBuilder.Entity("SlavChanAPP.Models.Thread", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BoardId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("TimeSinceLastPost")
                        .HasColumnType("real");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.ToTable("Threads");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e2906f0e-cecf-4c2f-9b12-9d3d1ad0765e"),
                            BoardId = 1,
                            Content = "Treść pierwszego wątku",
                            Name = "Pierwszy wątek",
                            PostDate = new DateTime(2023, 10, 30, 11, 18, 31, 905, DateTimeKind.Local).AddTicks(8601),
                            TimeSinceLastPost = 11f,
                            UserId = new Guid("6f0386e4-449c-48de-90e9-bafecdb73c7a"),
                            UserName = "User1"
                        },
                        new
                        {
                            Id = new Guid("685f58f1-3c97-4190-a8d5-e1ca395a7a21"),
                            BoardId = 2,
                            Content = "Treść drugiego wątku",
                            Name = "Drugi wątek",
                            PostDate = new DateTime(2023, 10, 30, 11, 18, 31, 905, DateTimeKind.Local).AddTicks(8643),
                            TimeSinceLastPost = 11f,
                            UserId = new Guid("e06cc998-fbcc-4c41-bb84-ddd718efe235"),
                            UserName = "User2"
                        });
                });

            modelBuilder.Entity("SlavChanAPP.Models.Reply", b =>
                {
                    b.HasOne("SlavChanAPP.Models.Thread", "Thread")
                        .WithMany("Replies")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Thread");
                });

            modelBuilder.Entity("SlavChanAPP.Models.Thread", b =>
                {
                    b.HasOne("SlavChanAPP.Models.Board", "Board")
                        .WithMany("Threads")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");
                });

            modelBuilder.Entity("SlavChanAPP.Models.Board", b =>
                {
                    b.Navigation("Threads");
                });

            modelBuilder.Entity("SlavChanAPP.Models.Thread", b =>
                {
                    b.Navigation("Replies");
                });
#pragma warning restore 612, 618
        }
    }
}
